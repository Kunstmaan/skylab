filter:
    excluded_paths:
        - 'vendor/*'
        - 'app/*'
        - 'web/*'
before_commands:
    - 'composer install --prefer-source'
tools:
    php_mess_detector:
        config:
            naming_rules: { boolean_method_name: true }
            controversial_rules: { camel_case_class_name: true, camel_case_property_name: true, camel_case_method_name: true, camel_case_parameter_name: true, camel_case_variable_name: true }
    php_cs_fixer:
        config:
            level: all
    php_analyzer:
        config:
            parameter_reference_check: { enabled: false }
            checkstyle: { enabled: true, no_trailing_whitespace: true, naming: { enabled: true, local_variable: '^[a-z][a-zA-Z0-9]*$', abstract_class_name: ^Abstract|Factory$, utility_class_name: 'Utils?$', constant_name: '^[A-Z][A-Z0-9]*(?:_[A-Z0-9]+)*$', property_name: '^[a-z][a-zA-Z0-9]*$', method_name: '^(?:[a-z]|__)[a-zA-Z0-9]*$', parameter_name: '^[a-z][a-zA-Z0-9]*$', interface_name: '^[A-Z][a-zA-Z0-9]*Interface$', type_name: '^[A-Z][a-zA-Z0-9]*$', exception_name: '^[A-Z][a-zA-Z0-9]*Exception$', isser_method_name: '^(?:is|has|should|may|supports)' } }
            unreachable_code: { enabled: true }
            check_access_control: { enabled: true }
            typo_checks: { enabled: false }
            check_variables: { enabled: true }
            suspicious_code: { enabled: true, overriding_parameter: true, overriding_closure_use: true, parameter_closure_use_conflict: true, parameter_multiple_times: true, non_existent_class_in_instanceof_check: true, non_existent_class_in_catch_clause: true, assignment_of_null_return: true, non_commented_switch_fallthrough: true, non_commented_empty_catch_block: true, overriding_private_members: true, use_statement_alias_conflict: true, precedence_in_condition_assignment: true }
            dead_assignments: { enabled: true }
            verify_php_doc_comments: { enabled: true, parameters: true, return: true, suggest_more_specific_types: true, ask_for_return_if_not_inferrable: true, ask_for_param_type_annotation: true }
            loops_must_use_braces: { enabled: true }
            check_usage_context: { enabled: true, method_call_on_non_object: { enabled: true, ignore_null_pointer: true }, foreach: { value_as_reference: true, traversable: true }, missing_argument: true, argument_type_checks: strict }
            simplify_boolean_return: { enabled: true }
            phpunit_checks: { enabled: false }
            reflection_checks: { enabled: true }
            precedence_checks: { enabled: true, assignment_in_condition: true, comparison_of_bit_result: true }
            basic_semantic_checks: { enabled: true }
            doc_comment_fixes: { enabled: true }
            reflection_fixes: { enabled: true }
            use_statement_fixes: { enabled: true, remove_unused: true, preserve_multiple: false, order_alphabetically: false }
            unused_code: { enabled: true }
            doctrine_parameter_binding: { enabled: false }
            doctrine_entity_manager_injection: { enabled: false }
    php_code_sniffer:
        config:
            sniffs: { psr1: { classes: { class_declaration_sniff: true } }, generic: { code_analysis: { unconditional_if_statement_sniff: true, for_loop_should_be_while_loop_sniff: true }, classes: { duplicate_class_name_sniff: true }, white_space: { disallow_tab_indent_sniff: true, scope_indent_sniff: true }, php: { no_silenced_errors_sniff: true, forbidden_functions_sniff: true, lower_case_constant_sniff: true, lower_case_keyword_sniff: true } }, zend: { debug: { code_analyzer_sniff: true } }, squiz: { code_analysis: { empty_statement_sniff: true }, classes: { lowercase_class_keywords_sniff: true, valid_class_name_sniff: true }, php: { disallow_comparison_assignment_sniff: true, disallow_size_functions_in_loops_sniff: true, forbidden_functions_sniff: true, lowercase_p_h_p_functions_sniff: true, discouraged_functions_sniff: true } } }
    sensiolabs_security_checker: true
    php_cpd: true
    php_loc: true
    php_pdepend: true
    php_hhvm: true
